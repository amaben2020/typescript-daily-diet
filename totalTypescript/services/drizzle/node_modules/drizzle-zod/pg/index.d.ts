import { GetColumnConfig } from 'drizzle-orm';
import { AnyPgColumn, AnyPgTable, GetTableConfig, PgEnumColumn, PgEnumColumnConfig, PgText, PgTextConfig } from 'drizzle-orm/pg-core';
import { Simplify } from 'drizzle-orm/utils';
import { z } from 'zod';
declare type SnakeToCamelCase<S extends string> = S extends `${infer T}${'_' | '-'}${infer U}` ? `${T}${Capitalize<SnakeToCamelCase<U>>}` : S;
declare type ToSnakeCase<S extends string> = S extends `${infer T}${'' | '-'}${infer U}` ? `${T extends Capitalize<T> ? Lowercase<T> extends Capitalize<T> ? '' : '_' : ''}${Lowercase<T>}${ToSnakeCase<U>}` : S;
declare type MaybeOptional<TColumn extends AnyPgColumn, TType extends z.ZodTypeAny, TNoOptional extends boolean = false> = TNoOptional extends true ? TType : GetColumnConfig<TColumn, 'hasDefault'> extends true ? z.ZodOptional<TType> : TType;
declare type GetZodType<TColumn extends AnyPgColumn> = GetColumnConfig<TColumn, 'data'> extends infer TType ? TColumn extends PgEnumColumn<PgEnumColumnConfig & {
    values: infer TValues extends [string, ...string[]];
}> ? z.ZodEnum<TValues> : TType extends number ? z.ZodNumber : TType extends string ? z.ZodString : TType extends boolean ? z.ZodBoolean : TType extends Date ? z.ZodDate : z.ZodAny : never;
declare type ConvertKeyName<K extends string, TCase extends 'snake' | 'camel' | undefined> = undefined extends TCase ? K : 'snake' extends TCase ? ToSnakeCase<K> : SnakeToCamelCase<K>;
export declare type BuildInsertSchema<TTable extends AnyPgTable, TCase extends 'snake' | 'camel' | undefined, TRefine extends Record<string, z.ZodTypeAny | undefined>, TNoOptional extends boolean = false> = GetTableConfig<TTable, 'columns'> extends infer TColumns extends Record<string, AnyPgColumn> ? {
    [K in keyof TColumns & string as ConvertKeyName<K, TCase>]: MaybeOptional<TColumns[K], ConvertKeyName<K, TCase> extends keyof TRefine ? TRefine[ConvertKeyName<K, TCase>] extends z.ZodTypeAny ? TRefine[ConvertKeyName<K, TCase>] : GetZodType<TColumns[K]> : GetZodType<TColumns[K]>, TNoOptional>;
} : never;
export declare type GetRequiredConfigFields<T extends AnyPgTable> = GetTableConfig<T, 'columns'> extends infer TColumns extends Record<string, AnyPgColumn> ? {
    [K in keyof TColumns]: TColumns[K] extends PgText<PgTextConfig & {
        values: infer TValues;
    }> ? [string, ...string[]] extends TValues ? never : TValues : never;
} : never;
export declare type RequiredFieldsConfig<TTable extends AnyPgTable> = Simplify<{
    [K in keyof GetRequiredConfigFields<TTable> as [GetRequiredConfigFields<TTable>[K]] extends [never] ? never : K]: {
        anyString: true;
    } | {
        enum: GetRequiredConfigFields<TTable>[K];
    };
}>;
export declare type Refine<TTable extends AnyPgTable, TCase extends 'snake' | 'camel' | undefined, TRefine extends {
    [K in keyof BuildInsertSchema<TTable, TCase, {}>]?: z.ZodTypeAny;
}> = {
    [K in keyof TRefine]: K extends keyof BuildInsertSchema<TTable, TCase, {}> ? TRefine[K] : never;
} | ((fields: BuildInsertSchema<TTable, TCase, {}, true>) => {
    [K in keyof TRefine]: K extends keyof BuildInsertSchema<TTable, TCase, {}> ? TRefine[K] : never;
});
export declare function createInsertSchema<TTable extends AnyPgTable>(table: TTable): z.ZodObject<BuildInsertSchema<TTable, undefined, {}>>;
export declare function createInsertSchema<TTable extends AnyPgTable, TCase extends 'snake' | 'camel'>(table: TTable, 
/**
 * @param convertToCase Convert keys to snake_case or camelCase
 */
convertToCase: TCase): z.ZodObject<BuildInsertSchema<TTable, TCase, {}>>;
export declare function createInsertSchema<TTable extends AnyPgTable, TRefine extends {
    [K in keyof BuildInsertSchema<TTable, undefined, {}>]?: z.ZodTypeAny;
}>(table: TTable, 
/**
 * @param refine Refine schema fields
 */
refine: Refine<TTable, undefined, TRefine>): z.ZodObject<BuildInsertSchema<TTable, undefined, TRefine>>;
export declare function createInsertSchema<TTable extends AnyPgTable, TCase extends 'snake' | 'camel', TRefine extends {
    [K in keyof BuildInsertSchema<TTable, TCase, {}>]?: z.ZodTypeAny;
}>(table: TTable, 
/**
 * @param convertToCase convert keys to snake_case or camelCase
 */
convertToCase: TCase, 
/**
 * @param refine Refine schema fields
 */
refine: Refine<TTable, TCase, TRefine>): z.ZodObject<BuildInsertSchema<TTable, TCase, TRefine>>;
export {};
//# sourceMappingURL=index.d.ts.map