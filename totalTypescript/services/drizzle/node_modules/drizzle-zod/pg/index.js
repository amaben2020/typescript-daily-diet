"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createInsertSchema = void 0;
const pg_core_1 = require("drizzle-orm/pg-core");
const utils_1 = require("drizzle-orm/pg-core/utils");
const zod_1 = require("zod");
function toCamelCase(value) {
    return value.replace(/([-_][a-z])/gi, ($1) => $1.toUpperCase().replace('-', '').replace('_', ''));
}
function toSnakeCase(value) {
    return value.replace(/([A-Z])/g, ($1) => `_${$1.toLowerCase()}`);
}
function createInsertSchema(table, ...rest) {
    const { convertToCase, refine } = (() => {
        if (rest.length === 0) {
            return { convertToCase: undefined, refine: undefined };
        }
        if (rest.length === 1) {
            if (typeof rest[0] === 'string') {
                return { convertToCase: rest[0], refine: undefined };
            }
            return { convertToCase: undefined, refine: rest[0] };
        }
        return { convertToCase: rest[0], refine: rest[1] };
    })();
    const columns = (0, utils_1.getTableColumns)(table, { format: 'object' });
    const columnEntries = Object.entries(columns);
    const fieldNamesMap = {};
    let schemaEntries = Object.fromEntries(columnEntries.map(([name, column]) => {
        let type;
        if (column instanceof pg_core_1.PgBigInt53 || column instanceof pg_core_1.PgInteger || column instanceof pg_core_1.PgSmallInt
            || column instanceof pg_core_1.PgSerial || column instanceof pg_core_1.PgBigSerial53 || column instanceof pg_core_1.PgSmallSerial
            || column instanceof pg_core_1.PgDoublePrecision || column instanceof pg_core_1.PgReal) {
            type = zod_1.z.number();
        }
        else if (column instanceof pg_core_1.PgBigInt64 || column instanceof pg_core_1.PgBigSerial64) {
            type = zod_1.z.bigint();
        }
        else if (column instanceof pg_core_1.PgBoolean) {
            type = zod_1.z.boolean();
        }
        else if (column instanceof pg_core_1.PgDate || column instanceof pg_core_1.PgTimestamp) {
            type = zod_1.z.date();
        }
        else if (column instanceof pg_core_1.PgEnumColumn) {
            type = zod_1.z.enum(column.enum.enumValues);
        }
        else if (column instanceof pg_core_1.PgInterval || column instanceof pg_core_1.PgNumeric || column instanceof pg_core_1.PgText
            || column instanceof pg_core_1.PgTime || column instanceof pg_core_1.PgVarchar) {
            type = zod_1.z.string();
        }
        else if (column instanceof pg_core_1.PgUUID) {
            type = zod_1.z.string().uuid();
        }
        if (!type) {
            type = zod_1.z.any();
        }
        fieldNamesMap[name] = convertToCase === 'camel'
            ? toCamelCase(name)
            : convertToCase === 'snake'
                ? toSnakeCase(name)
                : name;
        return [
            fieldNamesMap[name],
            type,
        ];
    }));
    if (refine) {
        schemaEntries = Object.assign(schemaEntries, typeof refine === 'function' ? refine(schemaEntries) : refine);
    }
    columnEntries.forEach(([name, column]) => {
        if (column.hasDefault) {
            schemaEntries[fieldNamesMap[name]] = schemaEntries[fieldNamesMap[name]].optional();
        }
    });
    return zod_1.z.object(schemaEntries);
}
exports.createInsertSchema = createInsertSchema;
//# sourceMappingURL=index.js.map