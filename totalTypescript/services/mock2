const sortedAvailabilities = [
  {
    id: 34,
    createdBy: 'admin',
    createdAt: '2024-07-28T11:17:03.975Z',
    updatedBy: null,
    updatedAt: null,
    providerId: 138,
    day: 1, // monday
    startTime: '06:00:00',
    endTime: '23:58:00',
    timezone: 'America/Los_Angeles',
    date: null,
    isOverride: false,
  },
  {
    id: 36,
    createdBy: 'admin',
    createdAt: '2024-07-28T11:17:03.975Z',
    updatedBy: null,
    updatedAt: null,
    providerId: 138,
    day: 2, // tuesday
    startTime: '01:00:00',
    endTime: '22:00:00',
    timezone: 'America/Los_Angeles',
    date: null,
    isOverride: false,
  },
  {
    id: 37,
    createdBy: 'admin',
    createdAt: '2024-07-28T11:17:03.975Z',
    updatedBy: null,
    updatedAt: null,
    providerId: 138,
    day: 2, // tuesday
    startTime: '22:01:00',
    endTime: '23:00:00',
    timezone: 'America/Los_Angeles',
    date: null,
    isOverride: false,
  },
];

// Assume computeWeekDate is defined and returns an object with start_timestamp and end_timestamp properties
function computeWeekDate(av) {
  // Dummy implementation
  return {
    start_timestamp: new Date(`2024-07-28T${av.startTime}`).getTime(),
    end_timestamp: new Date(`2024-07-28T${av.endTime}`).getTime(),
  };
}

const weekdayIndex = 2; // Example: current day is Tuesday
let currentAvailability = null;
let nextAvailability = null;

for (const [index, av] of sortedAvailabilities.entries()) {
  if (av.day === weekdayIndex) {
    currentAvailability = {
      start_timestamp: computeWeekDate(av).start_timestamp,
      end_timestamp: computeWeekDate(av).end_timestamp,
      id: av.id,
    };

    // Find the next availability
    const nextDayIndex = (weekdayIndex + 1) % 7;
    for (let i = index + 1; i < sortedAvailabilities.length; i++) {
      if (sortedAvailabilities[i].day === nextDayIndex) {
        nextAvailability = {
          start_timestamp: computeWeekDate(sortedAvailabilities[i])
            .start_timestamp,
          end_timestamp: computeWeekDate(sortedAvailabilities[i]).end_timestamp,
          id: sortedAvailabilities[i].id,
        };
        break;
      }
    }

    // If no next availability found in the loop, look from the beginning
    if (!nextAvailability) {
      for (let i = 0; i < index; i++) {
        if (sortedAvailabilities[i].day === nextDayIndex) {
          nextAvailability = {
            start_timestamp: computeWeekDate(sortedAvailabilities[i])
              .start_timestamp,
            end_timestamp: computeWeekDate(sortedAvailabilities[i])
              .end_timestamp,
            id: sortedAvailabilities[i].id,
          };
          break;
        }
      }
    }

    if (currentAvailability && nextAvailability) {
      break;
    }
  }
}

console.log('Current Availability:', currentAvailability);
console.log('Next Availability:', nextAvailability);
